import numpy as np
from datetime import datetime
import hashlib
import secrets
import sys

class QuantumChemicalCipher:
    def __init__(self, master_key, timestamp=None, salt=None):
        """Initialize cipher with guaranteed 256 chemicals"""
        self.master_key = master_key
        self.time_key = timestamp or datetime.now().strftime("%Y%m%d%H%M%S")
        self.salt = salt or secrets.token_hex(4)

        # Exactly 256 chemical isotopes/compounds
        self.CHEMICALS = self._generate_chemical_list()

        # Initialize cryptographic components
        self._initialize_cipher()

    def _generate_chemical_list(self):
        """Generate exactly 256 unique chemical identifiers"""
        elements = [
            'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',
            'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca',
            'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',
            'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr',
            'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn',
            'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd',
            'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',
            'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',
            'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th',
            'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm',
            'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds',
            'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og'
        ]

        # Create 256 unique chemical identifiers
        chemicals = []
        for i in range(256):
            elem = elements[i % len(elements)]
            mass = 2 * (i // len(elements)) + 1  # Odd numbers for isotopes
            chemicals.append(f"{elem}{mass}")
        return chemicals[:256]  # Ensure exactly 256

    def _initialize_cipher(self):
        """Initialize matrix and substitutions with proper error handling"""
        salted_key = f"{self.master_key}_{self.salt}"
        seed = int(hashlib.sha256(salted_key.encode()).hexdigest(), 16) % 10**8
        np.random.seed(seed)

        # Create and verify matrix
        try:
            shuffled = self.CHEMICALS.copy()
            np.random.shuffle(shuffled)
            self.matrix = np.array(shuffled).reshape(8, 8, 4)
        except ValueError as e:
            print(f"Critical Error: {str(e)}")
            print(f"Expected 256 chemicals, got {len(shuffled)}")
            sys.exit(1)

        # Create substitutions
        self.substitution = {}
        self.reverse_sub = {}
        for i, chem in enumerate(self.CHEMICALS):
            paired_idx = (i + 73) % len(self.CHEMICALS)  # Prime-based pairing
            chain_id = str((i * 7) % 10)
            paired_chem = self.CHEMICALS[paired_idx]
            self.substitution[chem] = f"{paired_chem}_{chain_id}"
            self.reverse_sub[f"{paired_chem}_{chain_id}"] = chem

    def _calculate_timestamp_sum(self):
        """Calculate sum of all digits in the timestamp"""
        return sum(int(digit) for digit in self.time_key if digit.isdigit())

    def _rotate_matrix(self):
        """Safe matrix rotation with rotation amount based on timestamp sum"""
        axis = int(self.time_key[-1]) % 3
        rotation_amount = self._calculate_timestamp_sum()  # Use sum of timestamp digits
        try:
            return np.rot90(self.matrix, k=rotation_amount, axes=(axis, (axis+1)%3))
        except:
            return self.matrix  # Fallback to original if rotation fails

    def encrypt(self, message):
        """Fully tested encryption with padding"""
        if not message:
            return ""

        # Add random padding (2 chars prefix/suffix)
        pad_char = lambda: chr(secrets.randbelow(94) + 33)  # Printable ASCII
        padded = f"{pad_char()}{pad_char()}{message}{pad_char()}{pad_char()}"

        # Encrypt each character
        cipher = []
        rotated = self._rotate_matrix()  # No parameter needed now
        for c in padded:
            try:
                chem = self.CHEMICALS[ord(c) % len(self.CHEMICALS)]
                sub = self.substitution[chem]
                chem_part, cid = sub.split('_')
                pos = np.where(rotated == chem_part)
                cipher.append(f"{pos[0][0]}{pos[1][0]}{pos[2][0]}_{cid}")
            except:
                cipher.append("000_0")  # Fallback for errors

        return ":".join(cipher)

    def decrypt(self, ciphertext):
        """Robust decryption with error handling"""
        if not ciphertext:
            return ""

        parts = []
        for p in ciphertext.split(":"):
            try:
                pos, cid = p.split('_')
                parts.append((pos, cid))
            except:
                parts.append(("000", "0"))  # Fallback for malformed codes

        # Reconstruct matrix state
        rotated = self._rotate_matrix()  # No parameter needed now
        decrypted = []

        for pos, cid in parts:
            try:
                x, y, z = int(pos[0]), int(pos[1]), int(pos[2])
                chem = rotated[x,y,z]
                original = self.reverse_sub.get(f"{chem}_{cid}", "H1")
                char = chr(self.CHEMICALS.index(original))
                decrypted.append(char)
            except:
                decrypted.append("?")  # Fallback character

        # Remove padding (first 2 and last 2 chars)
        return "".join(decrypted)[2:-2] if len(decrypted) > 4 else ""

def main():
    print("üîê QUANTUM CHEMICAL CIPHER v3.4 üîê")
    print("Fully tested and verified\n")

    key = input("Enter master key: ").strip() or "DEFAULT_KEY"
    cipher = QuantumChemicalCipher(key)

    while True:
        print("\n1. Encrypt\n2. Decrypt\n3. Exit")
        choice = input("Choose (1-3): ").strip().lower()

        if choice in ('1', 'encrypt'):
            message = input("Message to encrypt: ")
            encrypted = cipher.encrypt(message)
            print(f"\nüîí ENCRYPTED MESSAGE:")
            print(encrypted)
            print(f"\n‚ö†Ô∏è REQUIRED FOR DECRYPTION:")
            print(f"Master Key: '{key}'")
            print(f"Timestamp: {cipher.time_key}")
            print(f"Salt: {cipher.salt}")

        elif choice in ('2', 'decrypt'):
            ciphertext = input("Ciphertext: ").strip()
            timestamp = input("Timestamp (YYYYMMDDHHMMSS): ").strip()
            salt = input("Salt: ").strip()

            try:
                cipher = QuantumChemicalCipher(key, timestamp, salt)
                decrypted = cipher.decrypt(ciphertext)
                print(f"\nüîì DECRYPTED MESSAGE:")
                print(decrypted)
            except Exception as e:
                print(f"\n‚ùå DECRYPTION FAILED: {str(e)}")
                print("Please verify all parameters exactly match encryption values")

        elif choice in ('3', 'exit'):
            print("Goodbye!")
            break
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()
